
    output_file=outputDir+"outputResults/"+name+file+'OutputFile.csv'
        settings_file = outputDir+name+file+'SettingsFile.csv'
            training_file = outputDir+name+file+'DedupeTrainingFile.csv'

                data_d = readData(input_file)


                    if os.path.exists(settings_file):
                                print('Settings file found, reading from', settings_file)
                                        with open(settings_file, 'rb') as f:
                                                        deduper = dedupe.StaticDedupe(f)
                    else:

                                deduper = dedupe.Dedupe(fields)

                                        if os.path.exists(training_file):
                                                        print('Training file exists, reading labeled examples from ', training_file)
                                                                    with open(training_file, 'rb') as f:
                                                                                        deduper.prepare_training(data_d, f)
                                        else:
                                                        deduper.prepare_training(data_d)

                                                                print('Starting active labeling...')
                                                                        dedupe.console_label(deduper)

                                                                                deduper.train()

                                                                                        with open(training_file, 'w') as tf:
                                                                                                        deduper.write_training(tf)

                                                                                                                with open(settings_file, 'wb') as sf:
                                                                                                                                deduper.write_settings(sf)

                                                                                                                                    print('clustering...')
                                                                                                                                        clustered_dupes = deduper.partition(data_d, threshold)~